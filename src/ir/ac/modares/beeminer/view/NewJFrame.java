package ir.ac.modares.beeminer.view;
/**
 * 
 *
 * @author mehdi talebi
 */


import ir.ac.modares.beeminer.controller.BeeMiner;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Calendar;
import javax.swing.JFileChooser;
import javax.swing.UIManager;
import javax.swing.filechooser.FileFilter;
import weka.core.converters.AbstractFileLoader;
import weka.core.converters.ArffLoader;
import weka.gui.ConverterFileChooser;
import weka.gui.explorer.ExplorerDefaults;

/**
 *
 * @author mehdi
 */
public class NewJFrame extends javax.swing.JFrame {

    ConverterFileChooser m_FileChooser = new ConverterFileChooser(new File(ExplorerDefaults.getInitialDirectory()));
    File datasetFile, dataSetsFolder;
    AbstractFileLoader loader;
    BeeMiner bee;

    /**
     * Creates new form NewJFrame
     */
    public NewJFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        editorPane = new javax.swing.JEditorPane();
        jComboBox1 = new javax.swing.JComboBox();
        jButton1 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("FuzzyBeeMiner");
        setBackground(new java.awt.Color(255, 255, 153));

        editorPane.setEditable(false);
        editorPane.setBackground(new java.awt.Color(255, 255, 204));
        jScrollPane1.setViewportView(editorPane);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jButton1.setText("Select & Run");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jMenuBar1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jMenu1.setText("File");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setText("Open");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 663, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addGap(0, 8, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed

        if (m_FileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {

            loader = m_FileChooser.getLoader();

            datasetFile = loader.retrieveFile();
            dataSetsFolder = datasetFile.getParentFile();
            try {
                Run2();
            } catch (Exception e) {
                e.printStackTrace();
            }
//              bee = new BeeMiner(datasetFile.getAbsolutePath(),loader);
//              int size = bee.Instances.numAttributes();
//              jComboBox1.removeAllItems();
//              for(int i =0; i < size; i++)
//                  jComboBox1.addItem(bee.Instances.attribute(i).name());

        }
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        bee.setClassIndex(jComboBox1.getSelectedIndex());

    }//GEN-LAST:event_jButton1ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception e) {
            System.out.println("Error setting native LAF: " + e);
        }
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewJFrame().setVisible(true);
            }
        });

    }

    private void makeAllParamFalse(BeeMiner bee) {
        bee.print = false;
        bee.oneAgainstAll = false;
        bee.seperatTestFile = false;
        bee.selectAtrTournoment = false;
        bee.useVBest = false;
        bee.mongoliaAttack = false;
        bee.localSearchOnNewFoods = false;
        bee.localSearchOnBestFood = false;
        bee.localSearchOnRandomFoods = false;
        bee.incrementalPopulation = false;
        bee.socialLearning = false;
        bee.sendScoutBasedOnGlobalMin = false;
        bee.powellLS = false;
        bee.simplexLS = false;
        bee.normalLS = false;
        bee.allNeighborForCategoricalAtr = false;
        bee.setNeighborValueForCategorical = false;
    }

    public void RunForRun() throws IOException {
        Calendar c = Calendar.getInstance();
        FileFilter filter = new FileFilter() {

            @Override
            public boolean accept(File f) {
                return f.isDirectory() || f.getName().toLowerCase().endsWith(".arff");
            }

            @Override
            public String getDescription() {
                return "dataset file";
            }
        };
        try (FileWriter fstream = new FileWriter(dataSetsFolder.getAbsoluteFile() + "\\iris-multibleRun14.txt")) {
            BufferedWriter out = new BufferedWriter(fstream);
            String dataset;
            out.write("Start Time: " + c.getTime());
            out.newLine();
            File[] files = dataSetsFolder.listFiles(new java.io.FileFilter() {

                @Override
                public boolean accept(File pathname) {
                    return pathname.getName().toLowerCase().endsWith(".arff");
                }
            });
            for (int f = 0; f < files.length; f++) {

                for (int iter = 0; iter < 30; iter++) {
                    loader = new ArffLoader();
                    loader.setFile(files[f]);

                    bee = new BeeMiner(loader);
                    dataset = loader.retrieveFile().getName() + ",";
                    makeAllParamFalse(bee);
                    if (iter < 10) {
                        bee.allNeighborForCategoricalAtr = true;
                    } else if (iter < 20) {
                        bee.setNeighborValueForCategorical = true;
                    } else if (iter < 30) {

                    } else {

                    }

                    int[][] confMat = bee.Run();
                    StringBuilder sb = new StringBuilder(50);
                    int sum = 0, corr = 0;
                    sb.append(dataset);
                    for (int i = 0; i < bee.classCounter; i++) {
                        for (int j = 0; j < bee.classCounter; j++) {
                            StringBuilder append = sb.append(confMat[i][j]).append(",");
                            sum += confMat[i][j];
                            if (i == j) {
                                corr += confMat[i][j];
                            }
                        }

                    }
                    StringBuilder append
                            = sb.append((double) corr / sum).append(",").append(bee.TestOnTrain).append(",").append(bee.RuleForClassifyCounter)
                            .append(",").append(bee.TermsForRulesCounter);
                    out.write(sb.toString());
                    out.newLine();
                    out.flush();
                }
            }
            c = Calendar.getInstance();
            out.write("End Time: " + c.getTime());
            out.newLine();
            out.close();
        }
    }

    public void Run() throws IOException {
        Calendar c = Calendar.getInstance();
        FileWriter fstream = new FileWriter("C:\\Users\\talebi\\Desktop\\datasets\\finalresult\\final\\iris-thisTime.txt");
        BufferedWriter out = new BufferedWriter(fstream);
        String dataset;
        out.write("Start Time: " + c.getTime());
        out.newLine();

        for (int iter = 40; iter < 100; iter++) {
            bee = new BeeMiner(loader);
            dataset = "Sonar,";
            if (iter < 40) {
                bee.sendScoutBasedOnGlobalMin = true;

                if (iter < 20) {
                    bee.localSearchOnRandomFoods = true;
                    if (iter < 10) {
                        bee.socialLearning = true;
                        bee.incrementalPopulation = true;
                    } else;
                } else {
                    if (iter < 30) {
                        bee.socialLearning = true;
                        bee.incrementalPopulation = true;
                    } else;
                }
            } else if (iter < 100) {
                if (iter < 70) {
                    bee.localSearchOnRandomFoods = true;
                    if (iter < 50) {
                        bee.socialLearning = true;
                        bee.incrementalPopulation = true;
                    } else if (iter < 60) {
                        bee.incrementalPopulation = true;
                    } else;
                } else {
                    if (iter < 80) {
                        bee.socialLearning = true;
                        bee.incrementalPopulation = true;
                    } else if (iter < 90) {
                        bee.incrementalPopulation = true;
                    } else;
                }
            }
            int[][] confMat = bee.Run();
            StringBuilder sb = new StringBuilder(50);
            int sum = 0, corr = 0;
            sb.append(dataset);
            for (int i = 0; i < bee.classCounter; i++) {
                for (int j = 0; j < bee.classCounter; j++) {
                    StringBuilder append = sb.append(confMat[i][j]).append(",");
                    sum += confMat[i][j];
                    if (i == j) {
                        corr += confMat[i][j];
                    }
                }

            }
            StringBuilder append
                    = sb.append((double) corr / sum).append(",").append(bee.RuleForClassifyCounter)
                    .append(",").append(bee.TermsForRulesCounter);
            out.write(sb.toString());
            out.newLine();
            out.flush();
        }
        c = Calendar.getInstance();
        out.write("End Time: " + c.getTime());
        out.newLine();
        out.close();
        fstream.close();
    }

    public void Run4() throws IOException {
        Calendar c = Calendar.getInstance();
        FileWriter fstream = new FileWriter("C:\\Users\\talebi\\Desktop\\datasets\\finalresult\\breast-tissue-diff_dist_LS.txt");
        BufferedWriter out = new BufferedWriter(fstream);
        String dataset;
        BeeMiner bee;
        out.write("Start Time: " + c.getTime());
        out.newLine();

        for (int iter = 0; iter < 10; iter++) {
            bee = new BeeMiner(loader);
            dataset = "Sonar,";

//            if(iter<10){bee.socialLearning = true;bee.incrementalPopulation = true;}
//            else bee.incrementalPopulation = true;            
            int[][] confMat = bee.Run();
            StringBuilder sb = new StringBuilder(50);
            int sum = 0, corr = 0;
            sb.append(dataset);
            for (int i = 0; i < bee.classCounter; i++) {
                for (int j = 0; j < bee.classCounter; j++) {
                    StringBuilder append = sb.append(confMat[i][j]).append(",");
                    sum += confMat[i][j];
                    if (i == j) {
                        corr += confMat[i][j];
                    }
                }

            }
            StringBuilder append
                    = sb.append((double) corr / sum).append(",").append(bee.RuleForClassifyCounter)
                    .append(",").append(bee.TermsForRulesCounter);
            out.write(sb.toString());
            out.newLine();
            out.flush();
        }
        c = Calendar.getInstance();
        out.write("End Time: " + c.getTime());
        out.newLine();
        out.close();
        fstream.close();
    }

    public void Run2() {
        bee = new BeeMiner(loader);
        int[][] confMat = bee.Run();
        StringBuilder sb = new StringBuilder(50);
        int sum = 0, corr = 0;
        for (int i = 0; i < bee.classCounter; i++) {
            for (int j = 0; j < bee.classCounter; j++) {
                sb.append(confMat[i][j]).append("\t");
                sum += confMat[i][j];
                if (i == j) {
                    corr += confMat[i][j];
                }
            }
            sb.append("\n\n");
        }

        sb.append("\n \n accuracy: ").append((double) corr / sum);
        editorPane.setText(sb.toString());
    }

    public void Run1() throws IOException {
        Calendar c = Calendar.getInstance();
        FileWriter fstream = new FileWriter("C:\\Users\\talebi\\Desktop\\datasets\\sonar_with_real_INC_i.txt");
        BufferedWriter out = new BufferedWriter(fstream);
        String dataset;
        BeeMiner bee;
        out.write("Start Time: " + c.getTime());
        out.newLine();

        for (int iter = 0; iter < 80; iter++) {
            bee = new BeeMiner(loader);
            dataset = "Sonar,";

            if (iter < 40) {

                bee.sendScoutBasedOnGlobalMin = true;
                bee.incrementalPopulation = true;
                if (iter < 10) {
                    bee.localSearchOnBestFood = true;
                } else if (iter < 20) {
                    bee.localSearchOnNewFoods = true;
                } else if (iter < 30) {
                    bee.localSearchOnRandomFoods = true;
                } else;
            } else {

                bee.incrementalPopulation = true;
                if (iter < 50) {
                    bee.localSearchOnBestFood = true;
                } else if (iter < 60) {
                    bee.localSearchOnNewFoods = true;
                } else if (iter < 70) {
                    bee.localSearchOnRandomFoods = true;
                } else;
            }
            int[][] confMat = bee.Run();
            StringBuilder sb = new StringBuilder(50);
            int sum = 0, corr = 0;
            sb.append(dataset);
            for (int i = 0; i < bee.classCounter; i++) {
                for (int j = 0; j < bee.classCounter; j++) {
                    StringBuilder append = sb.append(confMat[i][j]).append(",");
                    sum += confMat[i][j];
                    if (i == j) {
                        corr += confMat[i][j];
                    }
                }

            }
            StringBuilder append
                    = sb.append((double) corr / sum);
            out.write(sb.toString());
            out.newLine();
            out.flush();
        }
        c = Calendar.getInstance();
        out.write("End Time: " + c.getTime());
        out.newLine();
        out.close();
        fstream.close();
    }

    public void Run3() throws IOException {
        Calendar c = Calendar.getInstance();
        FileWriter fstream = new FileWriter("C:\\Users\\talebi\\Desktop\\datasets\\sonar_random_prob22.txt");
        BufferedWriter out = new BufferedWriter(fstream);
        String dataset;
        BeeMiner bee;
        out.write("Start Time: " + c.getTime());
        out.newLine();

        for (int iter = 0; iter < 40; iter++) {
            bee = new BeeMiner(loader);
            dataset = "Sonar,";

            if (iter < 40) {

//            bee.sendScoutBasedOnGlobalMin = true;
//            bee.incrementalPopulation = true;
                if (iter < 10) {
                    bee.randomProbability = 0.01;
                } else if (iter < 20) {
                    bee.randomProbability = 0.05;
                } else if (iter < 30) {
                    bee.randomProbability = 0.03;
                } else {
                    bee.randomProbability = 0.1;
                }
            } else {

                bee.incrementalPopulation = true;
                if (iter < 50) {
                    bee.localSearchOnBestFood = true;
                } else if (iter < 60) {
                    bee.localSearchOnNewFoods = true;
                } else if (iter < 70) {
                    bee.localSearchOnRandomFoods = true;
                } else;
            }
            int[][] confMat = bee.Run();
            StringBuilder sb = new StringBuilder(50);
            int sum = 0, corr = 0;
            sb.append(dataset);
            for (int i = 0; i < bee.classCounter; i++) {
                for (int j = 0; j < bee.classCounter; j++) {
                    sb.append(confMat[i][j]).append(",");
                    sum += confMat[i][j];
                    if (i == j) {
                        corr += confMat[i][j];
                    }
                }

            }
            StringBuilder append = sb.append((double) corr / sum).append(",").append(bee.RuleForClassifyCounter)
                    .append(",").append(bee.TermsForRulesCounter);
            out.write(append.toString());
            out.newLine();
            out.flush();
        }
        c = Calendar.getInstance();
        out.write("End Time: " + c.getTime());
        out.newLine();
        out.close();
        fstream.close();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JEditorPane editorPane;
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

}
